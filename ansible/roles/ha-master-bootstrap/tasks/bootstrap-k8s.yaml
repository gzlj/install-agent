- name: kubeadm 
  copy:
    dest: /opt/kubeadm-conf.yaml
    content: |
      apiVersion: kubeadm.k8s.io/v1beta1
      bootstrapTokens:
      - groups:
        - system:bootstrappers:kubeadm:default-node-token
        token: b99a00.a144ef80536d4344
        ttl: 0s
        usages:
        - signing
        - authentication
      kind: InitConfiguration
      ---
      apiVersion: kubeadm.k8s.io/v1beta1
      certificatesDir: /etc/kubernetes/pki
      clusterName: kubernetes
      controlPlaneEndpoint: "{{ control_plane_endpoint }}"
      apiServer:
        certSANs:
        - {{ master1_ip }}
        timeoutForControlPlane: 4m0s
        extraArgs:
          service-node-port-range: 1-65535
        #  insecure-bind-address : "0.0.0.0"
        #  insecure-port : "8080"
      controllerManager:
        extraArgs:
          "feature-gates": "RotateKubeletServerCertificate=true"
          "experimental-cluster-signing-duration": "876000h0m0s"
      kind: ClusterConfiguration
      kubernetesVersion: {{ kubernetes_version | default('v1.14.2') }}
      imageRepository: {{ lan_registry }}
      networking:
        podSubnet: {{ pod_subnet | default('10.244.0.0/16') }}
        serviceSubnet: {{ service_subnet | default('10.96.0.0/12') }}
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      readOnlyPort: 10255
      evictionHard:
        imagefs.available: 5%
        memory.available: 2Gi
        nodefs.available: 10%
        nodefs.inodesFree: 5%
      kind: KubeletConfiguration
      ---
      apiVersion: kubeproxy.config.k8s.io/v1alpha1
      kind: KubeProxyConfiguration
      mode: {{ kubeproxy_mode | default('ipvs') }}
- name: bootstrap k8s 
  shell: | 
    /usr/bin/kubeadm init --config /opt/kubeadm-conf.yaml
    sleep 5
    docker ps | grep "kube-apis"
    if [[ "$?" != 0 ]]; then exit -1;fi;
    mkdir -p $HOME/.kube
    sudo /bin/cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config
    sleep 5
    kubectl apply -f /opt/calico.yml
    sleep 5
    kubectl apply -f /opt/calico.yml
    #kubectl taint nodes --all node-role.kubernetes.io/master-
    #kubectl apply -f /opt/kube-flannel.yml
    echo "KUBELET_EXTRA_ARGS=--node-ip={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"  > /etc/sysconfig/kubelet
    systemctl daemon-reload
    systemctl restart kubelet
    sleep 5
    kubectl apply -f /opt/calico.yml
    sleep 5
- name: deploy prometheus pods
  ignore_errors: yes
  shell: |
    cd /opt/
    rm -fr /opt/manifests
    tar xf /opt/prometheus-operator.tar.gz
    kubectl apply -f /opt/manifests/setup
    kubectl apply -f /opt/manifests/setup
    sleep 3
    echo "  externalLabels:" >> /opt/manifests/prometheus-prometheus.yaml
    echo "    cluster: '{{ cluster_name | default('default') }}'" >> /opt/manifests/prometheus-prometheus.yaml
    kubectl apply -f /opt/manifests
    kubectl apply -f /opt/manifests
- name: deploy ceph provisioner pod
  ignore_errors: yes
  shell: |
    cd /opt/
    rm -fr ceph-rbd-provisioner
    tar xf ceph-rbd-provisioner.tar.gz
    kubectl apply -f ceph-rbd-provisioner/
    sleep 1
    kubectl apply -f ceph-rbd-provisioner/
    rm -fr cephfs-provisioner
    tar xf cephfs-provisioner.tar.gz
    kubectl apply -f cephfs-provisioner/
    sleep 1
    kubectl apply -f cephfs-provisioner/

- name: deploy app plan
  when: enable_appplan == "true"
  shell: |
    cd /opt/
    rm -fr appplan
    tar xf /opt/appplan.tar.gz
    kubectl apply -f /opt/appplan
